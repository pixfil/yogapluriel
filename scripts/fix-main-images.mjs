#!/usr/bin/env node
/**
 * Script pour d√©finir l'image principale de chaque projet
 * Utilise la premi√®re image de la galerie (order_index = 0) comme main_image
 * Usage: node scripts/fix-main-images.mjs
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger les variables d'environnement
dotenv.config({ path: join(__dirname, '..', '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes:');
  console.error('   NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úì' : '‚úó');
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', supabaseKey ? '‚úì' : '‚úó');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixMainImages() {
  console.log('üîß Correction des images principales des projets...\n');

  try {
    // R√©cup√©rer tous les projets
    const { data: projects, error: projectsError } = await supabase
      .from('projects')
      .select('id, title, slug, main_image');

    if (projectsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des projets:', projectsError);
      return;
    }

    if (!projects || projects.length === 0) {
      console.log('‚ö†Ô∏è  Aucun projet trouv√©.');
      return;
    }

    console.log(`üì¶ ${projects.length} projet(s) trouv√©(s)\n`);

    let updatedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;

    for (const project of projects) {
      console.log(`üìÇ ${project.title}`);
      console.log(`   ID: ${project.id.substring(0, 8)}...`);

      // V√©rifier si main_image est d√©j√† d√©finie
      if (project.main_image) {
        console.log(`   ‚úì Image principale d√©j√† d√©finie`);
        console.log(`   URL: ${project.main_image.substring(0, 60)}...`);
        skippedCount++;
        console.log('');
        continue;
      }

      // R√©cup√©rer la premi√®re image de la galerie
      const { data: images, error: imagesError } = await supabase
        .from('project_images')
        .select('url')
        .eq('project_id', project.id)
        .order('order_index', { ascending: true })
        .limit(1);

      if (imagesError) {
        console.error(`   ‚ùå Erreur images: ${imagesError.message}\n`);
        errorCount++;
        continue;
      }

      if (!images || images.length === 0) {
        console.log(`   ‚ö†Ô∏è  Aucune image dans la galerie\n`);
        skippedCount++;
        continue;
      }

      const mainImageUrl = images[0].url;

      // Mettre √† jour le projet
      const { error: updateError } = await supabase
        .from('projects')
        .update({ main_image: mainImageUrl })
        .eq('id', project.id);

      if (updateError) {
        console.error(`   ‚ùå Erreur mise √† jour: ${updateError.message}\n`);
        errorCount++;
        continue;
      }

      console.log(`   ‚úÖ Image principale d√©finie`);
      console.log(`   URL: ${mainImageUrl.substring(0, 60)}...`);
      updatedCount++;
      console.log('');
    }

    // R√©sum√©
    console.log('üìä R√âSUM√â DE LA CORRECTION:\n');
    console.log(`   ‚úÖ ${updatedCount} projet(s) mis √† jour`);
    console.log(`   ‚è≠Ô∏è  ${skippedCount} projet(s) ignor√©(s) (d√©j√† OK ou sans images)`);
    console.log(`   ‚ùå ${errorCount} erreur(s)\n`);

    if (updatedCount > 0) {
      console.log('‚ú® Correction termin√©e avec succ√®s !');
      console.log('   Rechargez votre navigateur pour voir les images.\n');
    } else {
      console.log('‚ÑπÔ∏è  Aucune mise √† jour n√©cessaire.\n');
    }

  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  }
}

// Ex√©cuter
fixMainImages();
