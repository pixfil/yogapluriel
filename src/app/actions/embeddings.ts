'use server';

import { getAdminClient } from '@/lib/supabase-server';
import { createOpenAI } from '@ai-sdk/openai';
import { embed } from 'ai';

import { Json } from '@/lib/database.types';
import { jsonToRecord } from '@/lib/type-utils';

/**
 * Convertit un vecteur number[] en format string pour pgvector
 * pgvector stocke les vecteurs comme des strings au format: "[0.1, 0.2, 0.3, ...]"
 */
function vectorToString(vector: number[]): string {
  return `[${vector.join(',')}]`;
}

/**
 * Interface pour un r√©sultat de recherche vectorielle
 * Note: metadata est Json dans la BDD mais converti en Record<string, any>
 */
export interface EmbeddingSearchResult {
  id: string;
  content_type: string;
  content_id: string;
  content_text: string;
  metadata: Json; // Type BDD, sera converti avec jsonToRecord()
  similarity: number;
}

/**
 * Interface pour les statistiques d'embeddings
 */
export interface EmbeddingsStats {
  content_type: string;
  count: number;
  last_updated: string;
}

/**
 * Interface pour le statut de r√©indexation
 */
export interface ReindexStatus {
  success: boolean;
  message: string;
  stats?: {
    projects: number;
    faq: number;
    lexique: number;
    certifications: number;
    services: number;
    company_info: number;
    total: number;
  };
  error?: string;
}

/**
 * G√©n√©rer un embedding pour un texte donn√©
 * Utilise OpenAI text-embedding-3-small (1536 dimensions)
 */
async function generateEmbedding(text: string, apiKey: string): Promise<number[]> {
  try {
    console.log('[generateEmbedding] API key length:', apiKey?.length || 0);

    if (!apiKey) {
      throw new Error('OpenAI API key not provided');
    }

    // Cr√©er un provider OpenAI avec la cl√© custom
    const openai = createOpenAI({
      apiKey: apiKey,
    });

    console.log('[generateEmbedding] About to call embed...');

    const { embedding } = await embed({
      model: openai.embedding('text-embedding-3-small'),
      value: text,
    });

    console.log('[generateEmbedding] Embedding generated successfully');

    return embedding;
  } catch (error) {
    console.error('[generateEmbedding] Error:', error);
    throw error;
  }
}

/**
 * R√©cup√©rer et d√©chiffrer la cl√© API OpenAI depuis Supabase
 */
async function getOpenAIApiKey(): Promise<string | null> {
  try {
    const supabase = getAdminClient();
    const encryptionSecret = process.env.ENCRYPTION_SECRET;

    console.log('[getOpenAIApiKey] ENCRYPTION_SECRET available:', !!encryptionSecret);

    if (!encryptionSecret) {
      console.error('[getOpenAIApiKey] ENCRYPTION_SECRET not configured');
      const fallback = process.env.DEFAULT_OPENAI_API_KEY || null;
      console.log('[getOpenAIApiKey] Using fallback:', !!fallback);
      return fallback;
    }

    // R√©cup√©rer la config AI
    const { data: config, error: configError } = await supabase
      .from('ai_chatbot_settings')
      .select('openai_api_key_encrypted')
      .single();

    console.log('[getOpenAIApiKey] Config retrieved:', !!config, 'Error:', configError?.message);
    console.log('[getOpenAIApiKey] Has encrypted key:', !!config?.openai_api_key_encrypted);

    if (configError || !config?.openai_api_key_encrypted) {
      // Fallback vers la cl√© par d√©faut
      const fallback = process.env.DEFAULT_OPENAI_API_KEY || null;
      console.log('[getOpenAIApiKey] No encrypted key, using fallback:', !!fallback);
      return fallback;
    }

    // D√©chiffrer la cl√©
    const { data: decryptedKey, error: decryptError } = await supabase.rpc(
      'decrypt_api_key',
      {
        encrypted_key: config.openai_api_key_encrypted,
        secret: encryptionSecret,
      }
    );

    console.log('[getOpenAIApiKey] Decrypted key:', !!decryptedKey, 'Error:', decryptError?.message);

    if (decryptError || !decryptedKey) {
      console.error('[getOpenAIApiKey] Error decrypting API key:', decryptError);
      // Fallback vers la cl√© par d√©faut
      const fallback = process.env.DEFAULT_OPENAI_API_KEY || null;
      console.log('[getOpenAIApiKey] Using fallback after decrypt error:', !!fallback);
      return fallback;
    }

    console.log('[getOpenAIApiKey] Successfully got decrypted key!');
    return decryptedKey;
  } catch (error) {
    console.error('[getOpenAIApiKey] Unexpected error:', error);
    const fallback = process.env.DEFAULT_OPENAI_API_KEY || null;
    console.log('[getOpenAIApiKey] Using fallback after exception:', !!fallback);
    return fallback;
  }
}

/**
 * Rechercher dans les embeddings avec une requ√™te texte
 * @param query - Texte de la requ√™te utilisateur
 * @param options - Options de recherche (threshold, limit, type)
 */
export async function searchEmbeddings(
  query: string,
  options: {
    threshold?: number;
    limit?: number;
    contentType?: string;
  } = {}
): Promise<EmbeddingSearchResult[]> {
  try {
    const { threshold = 0.7, limit = 5, contentType = null } = options;

    // R√©cup√©rer la cl√© API OpenAI
    const apiKey = await getOpenAIApiKey();
    if (!apiKey) {
      console.error('No OpenAI API key available for embeddings search');
      return [];
    }

    // G√©n√©rer l'embedding de la requ√™te
    const queryEmbedding = await generateEmbedding(query, apiKey);

    // Rechercher dans Supabase
    const supabase = getAdminClient();

    const { data, error } = await supabase.rpc('search_content_embeddings', {
      query_embedding: vectorToString(queryEmbedding), // Convertir en string pour pgvector
      match_threshold: threshold,
      match_count: limit,
      filter_content_type: contentType ?? undefined, // Convertir null en undefined
    });

    if (error) {
      console.error('Error searching embeddings:', error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error('Error in searchEmbeddings:', error);
    return [];
  }
}

/**
 * Obtenir les statistiques des embeddings
 * Pour affichage dans l'interface admin
 */
export async function getEmbeddingsStats(): Promise<EmbeddingsStats[]> {
  try {
    const supabase = getAdminClient();

    const { data, error } = await supabase.rpc('get_embeddings_stats');

    if (error) {
      console.error('Error getting embeddings stats:', error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error('Error in getEmbeddingsStats:', error);
    return [];
  }
}

/**
 * Supprimer tous les embeddings existants
 * Utilis√© avant une r√©indexation compl√®te
 */
async function clearAllEmbeddings(): Promise<void> {
  const supabase = getAdminClient();

  const { error } = await supabase
    .from('content_embeddings')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all

  if (error) {
    throw new Error(`Error clearing embeddings: ${error.message}`);
  }
}

/**
 * Indexer un √©l√©ment de contenu
 */
async function indexContent(
  contentType: string,
  contentId: string,
  contentText: string,
  metadata: Record<string, any>,
  apiKey: string
): Promise<void> {
  const supabase = getAdminClient();

  // G√©n√©rer l'embedding
  const embedding = await generateEmbedding(contentText, apiKey);

  // Ins√©rer dans la BDD
  const { error } = await supabase
    .from('content_embeddings')
    .insert({
      content_type: contentType,
      content_id: contentId,
      content_text: contentText,
      embedding: vectorToString(embedding), // Convertir en string pour pgvector
      metadata: metadata as Json, // Cast en Json pour correspondre au type BDD
    });

  if (error) {
    throw new Error(`Error indexing content: ${error.message}`);
  }
}

/**
 * R√©indexer tout le contenu du site
 * Cette fonction est appel√©e par le bouton dans l'admin
 */
export async function reindexAllContent(): Promise<ReindexStatus> {
  try {
    const supabase = getAdminClient();
    let stats = {
      projects: 0,
      faq: 0,
      lexique: 0,
      certifications: 0,
      services: 0,
      company_info: 0,
      total: 0,
    };

    console.log('üöÄ Starting reindexation...');

    // 0. R√©cup√©rer la cl√© API OpenAI
    console.log('üîë Getting OpenAI API key...');
    const apiKey = await getOpenAIApiKey();

    if (!apiKey) {
      throw new Error('OpenAI API key not configured. Please configure it in admin settings or add DEFAULT_OPENAI_API_KEY to .env.local');
    }

    // 1. Supprimer les anciens embeddings
    console.log('üóëÔ∏è  Clearing old embeddings...');
    await clearAllEmbeddings();

    // 2. Indexer les projets
    console.log('üì¶ Indexing projects...');
    const { data: projects, error: projectsError } = await supabase
      .from('projects')
      .select('id, title, description, location, materials, technical_details, subtitle, date')
      .eq('published', true);

    console.log(`   Found ${projects?.length || 0} projects`, projectsError ? `Error: ${projectsError.message}` : '');

    if (projects) {
      for (const project of projects) {
        const text = `
          Projet: ${project.title}
          ${project.subtitle ? `Sous-titre: ${project.subtitle}` : ''}
          Description: ${project.description || ''}
          Localisation: ${project.location || ''}
          Date: ${project.date || ''}
          Mat√©riaux: ${project.materials?.join(', ') || ''}
          D√©tails techniques: ${project.technical_details?.join('. ') || ''}
        `.trim();

        await indexContent('project', project.id, text, {
          title: project.title,
          location: project.location,
          date: project.date,
        }, apiKey);

        stats.projects++;
      }
    }

    // 3. Indexer les FAQ
    console.log('‚ùì Indexing FAQ...');
    const { data: faqQuestions, error: faqError } = await supabase
      .from('faq_questions')
      .select(`
        id,
        question,
        answer,
        published,
        faq_categories (
          title
        )
      `)
      .eq('published', true)
      .is('deleted_at', null);

    console.log(`   Found ${faqQuestions?.length || 0} FAQ questions`, faqError ? `Error: ${faqError.message}` : '');

    if (faqQuestions) {
      for (const faq of faqQuestions) {
        const categoryTitle = (faq as any).faq_categories?.title || '';
        const text = `
          Question: ${faq.question}
          R√©ponse: ${faq.answer}
          Cat√©gorie: ${categoryTitle}
        `.trim();

        await indexContent('faq', faq.id, text, {
          question: faq.question,
          category: categoryTitle,
        }, apiKey);

        stats.faq++;
      }
    }

    // 4. Indexer le lexique
    console.log('üìñ Indexing lexique...');
    const { data: lexiqueTerms, error: lexiqueError } = await supabase
      .from('lexique_terms')
      .select('id, term, definition, letter')
      .eq('published', true)
      .is('deleted_at', null);

    console.log(`   Found ${lexiqueTerms?.length || 0} lexique terms`, lexiqueError ? `Error: ${lexiqueError.message}` : '');

    if (lexiqueTerms) {
      for (const item of lexiqueTerms) {
        const text = `
          Terme: ${item.term}
          D√©finition: ${item.definition}
        `.trim();

        await indexContent('lexique', item.id, text, {
          term: item.term,
          letter: item.letter,
        }, apiKey);

        stats.lexique++;
      }
    }

    // 5. Indexer les certifications
    console.log('üèÜ Indexing certifications...');
    const { data: certifications, error: certificationsError } = await supabase
      .from('certifications')
      .select('id, name, description, category, benefits')
      .eq('published', true);

    console.log(`   Found ${certifications?.length || 0} certifications`, certificationsError ? `Error: ${certificationsError.message}` : '');

    if (certifications) {
      for (const cert of certifications) {
        const text = `
          Certification: ${cert.name}
          Description: ${cert.description || ''}
          Cat√©gorie: ${cert.category || ''}
          B√©n√©fices: ${cert.benefits?.join(', ') || ''}
        `.trim();

        await indexContent('certification', cert.id, text, {
          name: cert.name,
          category: cert.category,
        }, apiKey);

        stats.certifications++;
      }
    }

    // 6. Indexer les services/prestations (donn√©es statiques d√©taill√©es)
    console.log('üîß Indexing services...');
    const services = [
      {
        id: 'couverture',
        title: 'Couverture',
        description: `Installation et r√©novation de toitures professionnelles.
          Nous travaillons avec tous types de mat√©riaux : tuiles m√©caniques grand moule, tuiles plates traditionnelles, ardoises naturelles, zinc sur tasseaux, bac acier et toitures m√©talliques.
          Nos prestations incluent la d√©pose de l'ancienne couverture, la pose de liteaux ou voliges, la mise en place de l'√©cran sous-toiture, et la couverture compl√®te selon les DTU en vigueur.
          Nous intervenons sur tous types de chantiers : maisons individuelles, immeubles collectifs, b√¢timents professionnels, monuments historiques.
          Zone d'intervention : Strasbourg, Bas-Rhin et agglom√©ration.`,
      },
      {
        id: 'zinguerie',
        title: 'Zinguerie',
        description: `Travaux de zinguerie professionnels pour l'√©vacuation des eaux pluviales et l'√©tanch√©it√© des ouvrages.
          Nous r√©alisons : goutti√®res pendantes et ch√©neaux, descentes pluviales, noues et ar√™tiers, solins et bandes de rive, costi√®res et relev√©s d'√©tanch√©it√©.
          Mat√©riaux utilis√©s : zinc naturel, cuivre, aluminium laqu√©, acier galvanis√©.
          Fa√ßonnage sur-mesure en atelier pour s'adapter parfaitement √† votre toiture.
          Respect des r√®gles de l'art et des DTU pour une installation durable et esth√©tique.`,
      },
      {
        id: 'isolation',
        title: 'Isolation thermique et phonique',
        description: `Isolation de toiture pour am√©liorer les performances √©nerg√©tiques et le confort acoustique de votre habitat.
          Mat√©riaux biosourc√©s privil√©gi√©s : laine de bois rigide ou semi-rigide, fibre de chanvre, ouate de cellulose souffl√©e, laine de mouton.
          Techniques : isolation par l'int√©rieur (sarking), isolation entre chevrons, isolation de combles perdus par soufflage.
          Nous respectons les normes RT2012/RE2020 pour b√©n√©ficier des aides √† la r√©novation √©nerg√©tique.
          Am√©lioration significative du DPE et r√©duction des factures de chauffage.`,
      },
      {
        id: 'etancheite',
        title: '√âtanch√©it√© toiture terrasse',
        description: `√âtanch√©it√© de toitures plates et terrasses accessibles ou non.
          Syst√®mes mis en ≈ìuvre : r√©sine Triflex liquide (garantie 20 ans), membrane EPDM soud√©e, membrane bitumineuse arm√©e, bac acier √©tanche avec joints debout.
          Nous g√©rons la pr√©paration du support, l'isolation thermique, la membrane d'√©tanch√©it√©, les relev√©s et les √©vacuations.
          Interventions en neuf ou en r√©novation, pour tous types de b√¢timents : maisons contemporaines, immeubles, locaux commerciaux.
          Garantie d√©cennale sur tous nos travaux d'√©tanch√©it√©.`,
      },
      {
        id: 'velux',
        title: 'Fen√™tres de toit et verri√®res',
        description: `Installation et remplacement de fen√™tres de toit pour apporter lumi√®re naturelle et ventilation dans vos combles.
          Produits propos√©s : fen√™tres Velux √† rotation ou projection, lucarnes traditionnelles ou modernes, verri√®res modulaires fixes ou ouvrantes, conduits de lumi√®re naturelle Suntubes.
          Nous assurons la d√©coupe de toiture, le raccordement d'√©tanch√©it√©, la pose de bavettes et collerettes, l'habillage int√©rieur.
          Options disponibles : volets roulants solaires ou √©lectriques, stores occultants, moustiquaires.
          Am√©lioration du confort et de la valeur de votre bien immobilier.`,
      },
    ];

    for (const service of services) {
      await indexContent('service', service.id, `${service.title}: ${service.description}`, {
        title: service.title,
      }, apiKey);

      stats.services++;
    }

    // 7. Indexer les informations g√©n√©rales de l'entreprise
    console.log('üè¢ Indexing company information...');
    try {
      const { data: generalData, error: generalError } = await supabase
        .from('site_settings')
        .select('value')
        .eq('key', 'general')
        .single();

      const { data: seoData, error: seoError } = await supabase
        .from('site_settings')
        .select('value')
        .eq('key', 'seo')
        .single();

      if (!generalError && generalData) {
        const general = generalData.value as any;
        const seo = seoData?.value as any;

        // Enrichir le texte avec des variations de questions pour am√©liorer le matching s√©mantique
        const companyInfo = `
          Entreprise: ${seo?.company_name || 'FormDeToit'}
          Zone d'intervention: ${seo?.service_area || 'Strasbourg et agglom√©ration'}

          Coordonn√©es de contact:
          T√©l√©phone: ${general.phone || ''}
          Quel est le num√©ro de t√©l√©phone ? Comment nous appeler ? T√©l√©phone de FormDeToit: ${general.phone || ''}

          Email: ${general.email || ''}
          Quelle est l'adresse email ? Comment nous contacter par email ? Email de contact: ${general.email || ''}

          Adresse: ${general.address || ''}
          O√π sommes-nous situ√©s ? Quelle est notre adresse ? O√π se trouve FormDeToit ? Adresse compl√®te: ${general.address || ''}

          Horaires d'ouverture: ${general.hours || ''}
          Quels sont nos horaires ? Quand sommes-nous ouverts ? Horaires de FormDeToit ?
          Horaires d√©taill√©s: ${general.hours || ''}
        `.trim();

        await indexContent('company-info', 'general', companyInfo, {
          type: 'general',
        }, apiKey);

        stats.company_info = 1;
        console.log('   ‚úÖ Company information indexed');
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Company information indexing skipped (table not found)');
    }

    stats.total = stats.projects + stats.faq + stats.lexique + stats.certifications + stats.services + stats.company_info;

    console.log('‚úÖ Reindexation complete!', stats);

    return {
      success: true,
      message: `Indexation r√©ussie : ${stats.total} √©l√©ments index√©s`,
      stats,
    };

  } catch (error: any) {
    console.error('‚ùå Error in reindexAllContent:', error);
    return {
      success: false,
      message: 'Erreur lors de l\'indexation',
      error: error.message,
    };
  }
}
